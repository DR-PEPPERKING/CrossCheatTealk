// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrossCheatTalkNetMessages.proto

#ifndef PROTOBUF_CrossCheatTalkNetMessages_2eproto__INCLUDED
#define PROTOBUF_CrossCheatTalkNetMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CrossCheatTalkNetMessages_2eproto();
void protobuf_AssignDesc_CrossCheatTalkNetMessages_2eproto();
void protobuf_ShutdownFile_CrossCheatTalkNetMessages_2eproto();

class ConnectionAcceptedMessage;
class ChatMessage;
class Vector;
class SharedEspPlayerData;
class StandardizedSharedESP;
class StandardizedCheatInformation;

enum SharedEspPlayerData_StandardizedPlayerDataFlags {
  SharedEspPlayerData_StandardizedPlayerDataFlags_SCOPED = 1,
  SharedEspPlayerData_StandardizedPlayerDataFlags_DEFUSING = 2,
  SharedEspPlayerData_StandardizedPlayerDataFlags_FLASHED = 3,
  SharedEspPlayerData_StandardizedPlayerDataFlags_HAS_C4 = 4,
  SharedEspPlayerData_StandardizedPlayerDataFlags_RELOADING = 5,
  SharedEspPlayerData_StandardizedPlayerDataFlags_PLANTING = 6
};
bool SharedEspPlayerData_StandardizedPlayerDataFlags_IsValid(int value);
const SharedEspPlayerData_StandardizedPlayerDataFlags SharedEspPlayerData_StandardizedPlayerDataFlags_StandardizedPlayerDataFlags_MIN = SharedEspPlayerData_StandardizedPlayerDataFlags_SCOPED;
const SharedEspPlayerData_StandardizedPlayerDataFlags SharedEspPlayerData_StandardizedPlayerDataFlags_StandardizedPlayerDataFlags_MAX = SharedEspPlayerData_StandardizedPlayerDataFlags_PLANTING;
const int SharedEspPlayerData_StandardizedPlayerDataFlags_StandardizedPlayerDataFlags_ARRAYSIZE = SharedEspPlayerData_StandardizedPlayerDataFlags_StandardizedPlayerDataFlags_MAX + 1;

const ::google::protobuf::EnumDescriptor* SharedEspPlayerData_StandardizedPlayerDataFlags_descriptor();
inline const ::std::string& SharedEspPlayerData_StandardizedPlayerDataFlags_Name(SharedEspPlayerData_StandardizedPlayerDataFlags value) {
  return ::google::protobuf::internal::NameOfEnum(
    SharedEspPlayerData_StandardizedPlayerDataFlags_descriptor(), value);
}
inline bool SharedEspPlayerData_StandardizedPlayerDataFlags_Parse(
    const ::std::string& name, SharedEspPlayerData_StandardizedPlayerDataFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SharedEspPlayerData_StandardizedPlayerDataFlags>(
    SharedEspPlayerData_StandardizedPlayerDataFlags_descriptor(), name, value);
}
enum CrossCheatMsgType {
  _ConnectionAccepted = 0,
  _ChatMessage = 1,
  _StandardizedSharedESP = 2,
  _StandardizedCheatInformation = 3
};
bool CrossCheatMsgType_IsValid(int value);
const CrossCheatMsgType CrossCheatMsgType_MIN = _ConnectionAccepted;
const CrossCheatMsgType CrossCheatMsgType_MAX = _StandardizedCheatInformation;
const int CrossCheatMsgType_ARRAYSIZE = CrossCheatMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CrossCheatMsgType_descriptor();
inline const ::std::string& CrossCheatMsgType_Name(CrossCheatMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CrossCheatMsgType_descriptor(), value);
}
inline bool CrossCheatMsgType_Parse(
    const ::std::string& name, CrossCheatMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CrossCheatMsgType>(
    CrossCheatMsgType_descriptor(), name, value);
}
// ===================================================================

class ConnectionAcceptedMessage : public ::google::protobuf::Message {
 public:
  ConnectionAcceptedMessage();
  virtual ~ConnectionAcceptedMessage();

  ConnectionAcceptedMessage(const ConnectionAcceptedMessage& from);

  inline ConnectionAcceptedMessage& operator=(const ConnectionAcceptedMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionAcceptedMessage& default_instance();

  void Swap(ConnectionAcceptedMessage* other);

  // implements Message ----------------------------------------------

  ConnectionAcceptedMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectionAcceptedMessage& from);
  void MergeFrom(const ConnectionAcceptedMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sender_steamid = 1;
  inline bool has_sender_steamid() const;
  inline void clear_sender_steamid();
  static const int kSenderSteamidFieldNumber = 1;
  inline ::google::protobuf::uint32 sender_steamid() const;
  inline void set_sender_steamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConnectionAcceptedMessage)
 private:
  inline void set_has_sender_steamid();
  inline void clear_has_sender_steamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sender_steamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkNetMessages_2eproto();

  void InitAsDefaultInstance();
  static ConnectionAcceptedMessage* default_instance_;
};
// -------------------------------------------------------------------

class ChatMessage : public ::google::protobuf::Message {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  void Swap(ChatMessage* other);

  // implements Message ----------------------------------------------

  ChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sender_steamid = 1;
  inline bool has_sender_steamid() const;
  inline void clear_sender_steamid();
  static const int kSenderSteamidFieldNumber = 1;
  inline ::google::protobuf::uint32 sender_steamid() const;
  inline void set_sender_steamid(::google::protobuf::uint32 value);

  // required string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:ChatMessage)
 private:
  inline void set_has_sender_steamid();
  inline void clear_has_sender_steamid();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::uint32 sender_steamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkNetMessages_2eproto();

  void InitAsDefaultInstance();
  static ChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class Vector : public ::google::protobuf::Message {
 public:
  Vector();
  virtual ~Vector();

  Vector(const Vector& from);

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector& default_instance();

  void Swap(Vector* other);

  // implements Message ----------------------------------------------

  Vector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:Vector)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkNetMessages_2eproto();

  void InitAsDefaultInstance();
  static Vector* default_instance_;
};
// -------------------------------------------------------------------

class SharedEspPlayerData : public ::google::protobuf::Message {
 public:
  SharedEspPlayerData();
  virtual ~SharedEspPlayerData();

  SharedEspPlayerData(const SharedEspPlayerData& from);

  inline SharedEspPlayerData& operator=(const SharedEspPlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedEspPlayerData& default_instance();

  void Swap(SharedEspPlayerData* other);

  // implements Message ----------------------------------------------

  SharedEspPlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedEspPlayerData& from);
  void MergeFrom(const SharedEspPlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SharedEspPlayerData_StandardizedPlayerDataFlags StandardizedPlayerDataFlags;
  static const StandardizedPlayerDataFlags SCOPED = SharedEspPlayerData_StandardizedPlayerDataFlags_SCOPED;
  static const StandardizedPlayerDataFlags DEFUSING = SharedEspPlayerData_StandardizedPlayerDataFlags_DEFUSING;
  static const StandardizedPlayerDataFlags FLASHED = SharedEspPlayerData_StandardizedPlayerDataFlags_FLASHED;
  static const StandardizedPlayerDataFlags HAS_C4 = SharedEspPlayerData_StandardizedPlayerDataFlags_HAS_C4;
  static const StandardizedPlayerDataFlags RELOADING = SharedEspPlayerData_StandardizedPlayerDataFlags_RELOADING;
  static const StandardizedPlayerDataFlags PLANTING = SharedEspPlayerData_StandardizedPlayerDataFlags_PLANTING;
  static inline bool StandardizedPlayerDataFlags_IsValid(int value) {
    return SharedEspPlayerData_StandardizedPlayerDataFlags_IsValid(value);
  }
  static const StandardizedPlayerDataFlags StandardizedPlayerDataFlags_MIN =
    SharedEspPlayerData_StandardizedPlayerDataFlags_StandardizedPlayerDataFlags_MIN;
  static const StandardizedPlayerDataFlags StandardizedPlayerDataFlags_MAX =
    SharedEspPlayerData_StandardizedPlayerDataFlags_StandardizedPlayerDataFlags_MAX;
  static const int StandardizedPlayerDataFlags_ARRAYSIZE =
    SharedEspPlayerData_StandardizedPlayerDataFlags_StandardizedPlayerDataFlags_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StandardizedPlayerDataFlags_descriptor() {
    return SharedEspPlayerData_StandardizedPlayerDataFlags_descriptor();
  }
  static inline const ::std::string& StandardizedPlayerDataFlags_Name(StandardizedPlayerDataFlags value) {
    return SharedEspPlayerData_StandardizedPlayerDataFlags_Name(value);
  }
  static inline bool StandardizedPlayerDataFlags_Parse(const ::std::string& name,
      StandardizedPlayerDataFlags* value) {
    return SharedEspPlayerData_StandardizedPlayerDataFlags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 player_user_id = 2;
  inline bool has_player_user_id() const;
  inline void clear_player_user_id();
  static const int kPlayerUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 player_user_id() const;
  inline void set_player_user_id(::google::protobuf::uint32 value);

  // required uint32 player_steam_id = 3;
  inline bool has_player_steam_id() const;
  inline void clear_player_steam_id();
  static const int kPlayerSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint32 player_steam_id() const;
  inline void set_player_steam_id(::google::protobuf::uint32 value);

  // required .Vector player_origin = 4;
  inline bool has_player_origin() const;
  inline void clear_player_origin();
  static const int kPlayerOriginFieldNumber = 4;
  inline const ::Vector& player_origin() const;
  inline ::Vector* mutable_player_origin();
  inline ::Vector* release_player_origin();
  inline void set_allocated_player_origin(::Vector* player_origin);

  // optional int32 player_health = 5;
  inline bool has_player_health() const;
  inline void clear_player_health();
  static const int kPlayerHealthFieldNumber = 5;
  inline ::google::protobuf::int32 player_health() const;
  inline void set_player_health(::google::protobuf::int32 value);

  // optional int32 player_armor = 6;
  inline bool has_player_armor() const;
  inline void clear_player_armor();
  static const int kPlayerArmorFieldNumber = 6;
  inline ::google::protobuf::int32 player_armor() const;
  inline void set_player_armor(::google::protobuf::int32 value);

  // optional .Vector player_bbmin = 7;
  inline bool has_player_bbmin() const;
  inline void clear_player_bbmin();
  static const int kPlayerBbminFieldNumber = 7;
  inline const ::Vector& player_bbmin() const;
  inline ::Vector* mutable_player_bbmin();
  inline ::Vector* release_player_bbmin();
  inline void set_allocated_player_bbmin(::Vector* player_bbmin);

  // optional .Vector player_bbmax = 8;
  inline bool has_player_bbmax() const;
  inline void clear_player_bbmax();
  static const int kPlayerBbmaxFieldNumber = 8;
  inline const ::Vector& player_bbmax() const;
  inline ::Vector* mutable_player_bbmax();
  inline ::Vector* release_player_bbmax();
  inline void set_allocated_player_bbmax(::Vector* player_bbmax);

  // optional int32 player_active_weapon = 9;
  inline bool has_player_active_weapon() const;
  inline void clear_player_active_weapon();
  static const int kPlayerActiveWeaponFieldNumber = 9;
  inline ::google::protobuf::int32 player_active_weapon() const;
  inline void set_player_active_weapon(::google::protobuf::int32 value);

  // optional int32 player_ammo_count = 10;
  inline bool has_player_ammo_count() const;
  inline void clear_player_ammo_count();
  static const int kPlayerAmmoCountFieldNumber = 10;
  inline ::google::protobuf::int32 player_ammo_count() const;
  inline void set_player_ammo_count(::google::protobuf::int32 value);

  // optional int32 player_clip_size = 11;
  inline bool has_player_clip_size() const;
  inline void clear_player_clip_size();
  static const int kPlayerClipSizeFieldNumber = 11;
  inline ::google::protobuf::int32 player_clip_size() const;
  inline void set_player_clip_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SharedEspPlayerData)
 private:
  inline void set_has_player_user_id();
  inline void clear_has_player_user_id();
  inline void set_has_player_steam_id();
  inline void clear_has_player_steam_id();
  inline void set_has_player_origin();
  inline void clear_has_player_origin();
  inline void set_has_player_health();
  inline void clear_has_player_health();
  inline void set_has_player_armor();
  inline void clear_has_player_armor();
  inline void set_has_player_bbmin();
  inline void clear_has_player_bbmin();
  inline void set_has_player_bbmax();
  inline void clear_has_player_bbmax();
  inline void set_has_player_active_weapon();
  inline void clear_has_player_active_weapon();
  inline void set_has_player_ammo_count();
  inline void clear_has_player_ammo_count();
  inline void set_has_player_clip_size();
  inline void clear_has_player_clip_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 player_user_id_;
  ::google::protobuf::uint32 player_steam_id_;
  ::Vector* player_origin_;
  ::google::protobuf::int32 player_health_;
  ::google::protobuf::int32 player_armor_;
  ::Vector* player_bbmin_;
  ::Vector* player_bbmax_;
  ::google::protobuf::int32 player_active_weapon_;
  ::google::protobuf::int32 player_ammo_count_;
  ::google::protobuf::int32 player_clip_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkNetMessages_2eproto();

  void InitAsDefaultInstance();
  static SharedEspPlayerData* default_instance_;
};
// -------------------------------------------------------------------

class StandardizedSharedESP : public ::google::protobuf::Message {
 public:
  StandardizedSharedESP();
  virtual ~StandardizedSharedESP();

  StandardizedSharedESP(const StandardizedSharedESP& from);

  inline StandardizedSharedESP& operator=(const StandardizedSharedESP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StandardizedSharedESP& default_instance();

  void Swap(StandardizedSharedESP* other);

  // implements Message ----------------------------------------------

  StandardizedSharedESP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StandardizedSharedESP& from);
  void MergeFrom(const StandardizedSharedESP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sender_steamid = 1;
  inline bool has_sender_steamid() const;
  inline void clear_sender_steamid();
  static const int kSenderSteamidFieldNumber = 1;
  inline ::google::protobuf::uint32 sender_steamid() const;
  inline void set_sender_steamid(::google::protobuf::uint32 value);

  // required float message_send_time = 2;
  inline bool has_message_send_time() const;
  inline void clear_message_send_time();
  static const int kMessageSendTimeFieldNumber = 2;
  inline float message_send_time() const;
  inline void set_message_send_time(float value);

  // repeated .SharedEspPlayerData player_data = 3;
  inline int player_data_size() const;
  inline void clear_player_data();
  static const int kPlayerDataFieldNumber = 3;
  inline const ::SharedEspPlayerData& player_data(int index) const;
  inline ::SharedEspPlayerData* mutable_player_data(int index);
  inline ::SharedEspPlayerData* add_player_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SharedEspPlayerData >&
      player_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SharedEspPlayerData >*
      mutable_player_data();

  // @@protoc_insertion_point(class_scope:StandardizedSharedESP)
 private:
  inline void set_has_sender_steamid();
  inline void clear_has_sender_steamid();
  inline void set_has_message_send_time();
  inline void clear_has_message_send_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sender_steamid_;
  float message_send_time_;
  ::google::protobuf::RepeatedPtrField< ::SharedEspPlayerData > player_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkNetMessages_2eproto();

  void InitAsDefaultInstance();
  static StandardizedSharedESP* default_instance_;
};
// -------------------------------------------------------------------

class StandardizedCheatInformation : public ::google::protobuf::Message {
 public:
  StandardizedCheatInformation();
  virtual ~StandardizedCheatInformation();

  StandardizedCheatInformation(const StandardizedCheatInformation& from);

  inline StandardizedCheatInformation& operator=(const StandardizedCheatInformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StandardizedCheatInformation& default_instance();

  void Swap(StandardizedCheatInformation* other);

  // implements Message ----------------------------------------------

  StandardizedCheatInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StandardizedCheatInformation& from);
  void MergeFrom(const StandardizedCheatInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sender_steamid = 1;
  inline bool has_sender_steamid() const;
  inline void clear_sender_steamid();
  static const int kSenderSteamidFieldNumber = 1;
  inline ::google::protobuf::uint32 sender_steamid() const;
  inline void set_sender_steamid(::google::protobuf::uint32 value);

  // optional string cheat_name = 2;
  inline bool has_cheat_name() const;
  inline void clear_cheat_name();
  static const int kCheatNameFieldNumber = 2;
  inline const ::std::string& cheat_name() const;
  inline void set_cheat_name(const ::std::string& value);
  inline void set_cheat_name(const char* value);
  inline void set_cheat_name(const char* value, size_t size);
  inline ::std::string* mutable_cheat_name();
  inline ::std::string* release_cheat_name();
  inline void set_allocated_cheat_name(::std::string* cheat_name);

  // @@protoc_insertion_point(class_scope:StandardizedCheatInformation)
 private:
  inline void set_has_sender_steamid();
  inline void clear_has_sender_steamid();
  inline void set_has_cheat_name();
  inline void clear_has_cheat_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cheat_name_;
  ::google::protobuf::uint32 sender_steamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_AssignDesc_CrossCheatTalkNetMessages_2eproto();
  friend void protobuf_ShutdownFile_CrossCheatTalkNetMessages_2eproto();

  void InitAsDefaultInstance();
  static StandardizedCheatInformation* default_instance_;
};
// ===================================================================


// ===================================================================

// ConnectionAcceptedMessage

// required uint32 sender_steamid = 1;
inline bool ConnectionAcceptedMessage::has_sender_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectionAcceptedMessage::set_has_sender_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectionAcceptedMessage::clear_has_sender_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectionAcceptedMessage::clear_sender_steamid() {
  sender_steamid_ = 0u;
  clear_has_sender_steamid();
}
inline ::google::protobuf::uint32 ConnectionAcceptedMessage::sender_steamid() const {
  return sender_steamid_;
}
inline void ConnectionAcceptedMessage::set_sender_steamid(::google::protobuf::uint32 value) {
  set_has_sender_steamid();
  sender_steamid_ = value;
}

// -------------------------------------------------------------------

// ChatMessage

// required uint32 sender_steamid = 1;
inline bool ChatMessage::has_sender_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage::set_has_sender_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage::clear_has_sender_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage::clear_sender_steamid() {
  sender_steamid_ = 0u;
  clear_has_sender_steamid();
}
inline ::google::protobuf::uint32 ChatMessage::sender_steamid() const {
  return sender_steamid_;
}
inline void ChatMessage::set_sender_steamid(::google::protobuf::uint32 value) {
  set_has_sender_steamid();
  sender_steamid_ = value;
}

// required string message = 2;
inline bool ChatMessage::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMessage::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ChatMessage::message() const {
  return *message_;
}
inline void ChatMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void ChatMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void ChatMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* ChatMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Vector

// required float x = 1;
inline bool Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector::x() const {
  return x_;
}
inline void Vector::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Vector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector::y() const {
  return y_;
}
inline void Vector::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool Vector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector::z() const {
  return z_;
}
inline void Vector::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// SharedEspPlayerData

// required uint32 player_user_id = 2;
inline bool SharedEspPlayerData::has_player_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharedEspPlayerData::set_has_player_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharedEspPlayerData::clear_has_player_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharedEspPlayerData::clear_player_user_id() {
  player_user_id_ = 0u;
  clear_has_player_user_id();
}
inline ::google::protobuf::uint32 SharedEspPlayerData::player_user_id() const {
  return player_user_id_;
}
inline void SharedEspPlayerData::set_player_user_id(::google::protobuf::uint32 value) {
  set_has_player_user_id();
  player_user_id_ = value;
}

// required uint32 player_steam_id = 3;
inline bool SharedEspPlayerData::has_player_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharedEspPlayerData::set_has_player_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SharedEspPlayerData::clear_has_player_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SharedEspPlayerData::clear_player_steam_id() {
  player_steam_id_ = 0u;
  clear_has_player_steam_id();
}
inline ::google::protobuf::uint32 SharedEspPlayerData::player_steam_id() const {
  return player_steam_id_;
}
inline void SharedEspPlayerData::set_player_steam_id(::google::protobuf::uint32 value) {
  set_has_player_steam_id();
  player_steam_id_ = value;
}

// required .Vector player_origin = 4;
inline bool SharedEspPlayerData::has_player_origin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SharedEspPlayerData::set_has_player_origin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SharedEspPlayerData::clear_has_player_origin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SharedEspPlayerData::clear_player_origin() {
  if (player_origin_ != NULL) player_origin_->::Vector::Clear();
  clear_has_player_origin();
}
inline const ::Vector& SharedEspPlayerData::player_origin() const {
  return player_origin_ != NULL ? *player_origin_ : *default_instance_->player_origin_;
}
inline ::Vector* SharedEspPlayerData::mutable_player_origin() {
  set_has_player_origin();
  if (player_origin_ == NULL) player_origin_ = new ::Vector;
  return player_origin_;
}
inline ::Vector* SharedEspPlayerData::release_player_origin() {
  clear_has_player_origin();
  ::Vector* temp = player_origin_;
  player_origin_ = NULL;
  return temp;
}
inline void SharedEspPlayerData::set_allocated_player_origin(::Vector* player_origin) {
  delete player_origin_;
  player_origin_ = player_origin;
  if (player_origin) {
    set_has_player_origin();
  } else {
    clear_has_player_origin();
  }
}

// optional int32 player_health = 5;
inline bool SharedEspPlayerData::has_player_health() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SharedEspPlayerData::set_has_player_health() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SharedEspPlayerData::clear_has_player_health() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SharedEspPlayerData::clear_player_health() {
  player_health_ = 0;
  clear_has_player_health();
}
inline ::google::protobuf::int32 SharedEspPlayerData::player_health() const {
  return player_health_;
}
inline void SharedEspPlayerData::set_player_health(::google::protobuf::int32 value) {
  set_has_player_health();
  player_health_ = value;
}

// optional int32 player_armor = 6;
inline bool SharedEspPlayerData::has_player_armor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SharedEspPlayerData::set_has_player_armor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SharedEspPlayerData::clear_has_player_armor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SharedEspPlayerData::clear_player_armor() {
  player_armor_ = 0;
  clear_has_player_armor();
}
inline ::google::protobuf::int32 SharedEspPlayerData::player_armor() const {
  return player_armor_;
}
inline void SharedEspPlayerData::set_player_armor(::google::protobuf::int32 value) {
  set_has_player_armor();
  player_armor_ = value;
}

// optional .Vector player_bbmin = 7;
inline bool SharedEspPlayerData::has_player_bbmin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SharedEspPlayerData::set_has_player_bbmin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SharedEspPlayerData::clear_has_player_bbmin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SharedEspPlayerData::clear_player_bbmin() {
  if (player_bbmin_ != NULL) player_bbmin_->::Vector::Clear();
  clear_has_player_bbmin();
}
inline const ::Vector& SharedEspPlayerData::player_bbmin() const {
  return player_bbmin_ != NULL ? *player_bbmin_ : *default_instance_->player_bbmin_;
}
inline ::Vector* SharedEspPlayerData::mutable_player_bbmin() {
  set_has_player_bbmin();
  if (player_bbmin_ == NULL) player_bbmin_ = new ::Vector;
  return player_bbmin_;
}
inline ::Vector* SharedEspPlayerData::release_player_bbmin() {
  clear_has_player_bbmin();
  ::Vector* temp = player_bbmin_;
  player_bbmin_ = NULL;
  return temp;
}
inline void SharedEspPlayerData::set_allocated_player_bbmin(::Vector* player_bbmin) {
  delete player_bbmin_;
  player_bbmin_ = player_bbmin;
  if (player_bbmin) {
    set_has_player_bbmin();
  } else {
    clear_has_player_bbmin();
  }
}

// optional .Vector player_bbmax = 8;
inline bool SharedEspPlayerData::has_player_bbmax() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SharedEspPlayerData::set_has_player_bbmax() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SharedEspPlayerData::clear_has_player_bbmax() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SharedEspPlayerData::clear_player_bbmax() {
  if (player_bbmax_ != NULL) player_bbmax_->::Vector::Clear();
  clear_has_player_bbmax();
}
inline const ::Vector& SharedEspPlayerData::player_bbmax() const {
  return player_bbmax_ != NULL ? *player_bbmax_ : *default_instance_->player_bbmax_;
}
inline ::Vector* SharedEspPlayerData::mutable_player_bbmax() {
  set_has_player_bbmax();
  if (player_bbmax_ == NULL) player_bbmax_ = new ::Vector;
  return player_bbmax_;
}
inline ::Vector* SharedEspPlayerData::release_player_bbmax() {
  clear_has_player_bbmax();
  ::Vector* temp = player_bbmax_;
  player_bbmax_ = NULL;
  return temp;
}
inline void SharedEspPlayerData::set_allocated_player_bbmax(::Vector* player_bbmax) {
  delete player_bbmax_;
  player_bbmax_ = player_bbmax;
  if (player_bbmax) {
    set_has_player_bbmax();
  } else {
    clear_has_player_bbmax();
  }
}

// optional int32 player_active_weapon = 9;
inline bool SharedEspPlayerData::has_player_active_weapon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SharedEspPlayerData::set_has_player_active_weapon() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SharedEspPlayerData::clear_has_player_active_weapon() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SharedEspPlayerData::clear_player_active_weapon() {
  player_active_weapon_ = 0;
  clear_has_player_active_weapon();
}
inline ::google::protobuf::int32 SharedEspPlayerData::player_active_weapon() const {
  return player_active_weapon_;
}
inline void SharedEspPlayerData::set_player_active_weapon(::google::protobuf::int32 value) {
  set_has_player_active_weapon();
  player_active_weapon_ = value;
}

// optional int32 player_ammo_count = 10;
inline bool SharedEspPlayerData::has_player_ammo_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SharedEspPlayerData::set_has_player_ammo_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SharedEspPlayerData::clear_has_player_ammo_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SharedEspPlayerData::clear_player_ammo_count() {
  player_ammo_count_ = 0;
  clear_has_player_ammo_count();
}
inline ::google::protobuf::int32 SharedEspPlayerData::player_ammo_count() const {
  return player_ammo_count_;
}
inline void SharedEspPlayerData::set_player_ammo_count(::google::protobuf::int32 value) {
  set_has_player_ammo_count();
  player_ammo_count_ = value;
}

// optional int32 player_clip_size = 11;
inline bool SharedEspPlayerData::has_player_clip_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SharedEspPlayerData::set_has_player_clip_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SharedEspPlayerData::clear_has_player_clip_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SharedEspPlayerData::clear_player_clip_size() {
  player_clip_size_ = 0;
  clear_has_player_clip_size();
}
inline ::google::protobuf::int32 SharedEspPlayerData::player_clip_size() const {
  return player_clip_size_;
}
inline void SharedEspPlayerData::set_player_clip_size(::google::protobuf::int32 value) {
  set_has_player_clip_size();
  player_clip_size_ = value;
}

// -------------------------------------------------------------------

// StandardizedSharedESP

// required uint32 sender_steamid = 1;
inline bool StandardizedSharedESP::has_sender_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StandardizedSharedESP::set_has_sender_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StandardizedSharedESP::clear_has_sender_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StandardizedSharedESP::clear_sender_steamid() {
  sender_steamid_ = 0u;
  clear_has_sender_steamid();
}
inline ::google::protobuf::uint32 StandardizedSharedESP::sender_steamid() const {
  return sender_steamid_;
}
inline void StandardizedSharedESP::set_sender_steamid(::google::protobuf::uint32 value) {
  set_has_sender_steamid();
  sender_steamid_ = value;
}

// required float message_send_time = 2;
inline bool StandardizedSharedESP::has_message_send_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StandardizedSharedESP::set_has_message_send_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StandardizedSharedESP::clear_has_message_send_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StandardizedSharedESP::clear_message_send_time() {
  message_send_time_ = 0;
  clear_has_message_send_time();
}
inline float StandardizedSharedESP::message_send_time() const {
  return message_send_time_;
}
inline void StandardizedSharedESP::set_message_send_time(float value) {
  set_has_message_send_time();
  message_send_time_ = value;
}

// repeated .SharedEspPlayerData player_data = 3;
inline int StandardizedSharedESP::player_data_size() const {
  return player_data_.size();
}
inline void StandardizedSharedESP::clear_player_data() {
  player_data_.Clear();
}
inline const ::SharedEspPlayerData& StandardizedSharedESP::player_data(int index) const {
  return player_data_.Get(index);
}
inline ::SharedEspPlayerData* StandardizedSharedESP::mutable_player_data(int index) {
  return player_data_.Mutable(index);
}
inline ::SharedEspPlayerData* StandardizedSharedESP::add_player_data() {
  return player_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SharedEspPlayerData >&
StandardizedSharedESP::player_data() const {
  return player_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SharedEspPlayerData >*
StandardizedSharedESP::mutable_player_data() {
  return &player_data_;
}

// -------------------------------------------------------------------

// StandardizedCheatInformation

// required uint32 sender_steamid = 1;
inline bool StandardizedCheatInformation::has_sender_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StandardizedCheatInformation::set_has_sender_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StandardizedCheatInformation::clear_has_sender_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StandardizedCheatInformation::clear_sender_steamid() {
  sender_steamid_ = 0u;
  clear_has_sender_steamid();
}
inline ::google::protobuf::uint32 StandardizedCheatInformation::sender_steamid() const {
  return sender_steamid_;
}
inline void StandardizedCheatInformation::set_sender_steamid(::google::protobuf::uint32 value) {
  set_has_sender_steamid();
  sender_steamid_ = value;
}

// optional string cheat_name = 2;
inline bool StandardizedCheatInformation::has_cheat_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StandardizedCheatInformation::set_has_cheat_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StandardizedCheatInformation::clear_has_cheat_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StandardizedCheatInformation::clear_cheat_name() {
  if (cheat_name_ != &::google::protobuf::internal::kEmptyString) {
    cheat_name_->clear();
  }
  clear_has_cheat_name();
}
inline const ::std::string& StandardizedCheatInformation::cheat_name() const {
  return *cheat_name_;
}
inline void StandardizedCheatInformation::set_cheat_name(const ::std::string& value) {
  set_has_cheat_name();
  if (cheat_name_ == &::google::protobuf::internal::kEmptyString) {
    cheat_name_ = new ::std::string;
  }
  cheat_name_->assign(value);
}
inline void StandardizedCheatInformation::set_cheat_name(const char* value) {
  set_has_cheat_name();
  if (cheat_name_ == &::google::protobuf::internal::kEmptyString) {
    cheat_name_ = new ::std::string;
  }
  cheat_name_->assign(value);
}
inline void StandardizedCheatInformation::set_cheat_name(const char* value, size_t size) {
  set_has_cheat_name();
  if (cheat_name_ == &::google::protobuf::internal::kEmptyString) {
    cheat_name_ = new ::std::string;
  }
  cheat_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StandardizedCheatInformation::mutable_cheat_name() {
  set_has_cheat_name();
  if (cheat_name_ == &::google::protobuf::internal::kEmptyString) {
    cheat_name_ = new ::std::string;
  }
  return cheat_name_;
}
inline ::std::string* StandardizedCheatInformation::release_cheat_name() {
  clear_has_cheat_name();
  if (cheat_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cheat_name_;
    cheat_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StandardizedCheatInformation::set_allocated_cheat_name(::std::string* cheat_name) {
  if (cheat_name_ != &::google::protobuf::internal::kEmptyString) {
    delete cheat_name_;
  }
  if (cheat_name) {
    set_has_cheat_name();
    cheat_name_ = cheat_name;
  } else {
    clear_has_cheat_name();
    cheat_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SharedEspPlayerData_StandardizedPlayerDataFlags>() {
  return ::SharedEspPlayerData_StandardizedPlayerDataFlags_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CrossCheatMsgType>() {
  return ::CrossCheatMsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CrossCheatTalkNetMessages_2eproto__INCLUDED
